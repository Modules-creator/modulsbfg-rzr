import sqlite3
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = '7901399147:AAETUr5bZOtbBscoAsxeVvh5Z_9tMXZY3vE'
CHANNEL_ID = '@BelgorodSell411'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('users.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, username TEXT, first_name TEXT, 
                 last_name TEXT, is_banned INTEGER DEFAULT 0)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS admins
                 (user_id INTEGER PRIMARY KEY)''')
conn.commit()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID)
ADMIN_ID = 1152451752 # Telegram
cursor.execute("INSERT OR IGNORE INTO admins (user_id) VALUES (?)", (ADMIN_ID,))
conn.commit()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class PostStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_photos = State()
    waiting_for_confirmation = State()

class AdminStates(StatesGroup):
    ban_user = State()
    unban_user = State()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    cursor.execute("SELECT 1 FROM admins WHERE user_id=?", (user_id,))
    return cursor.fetchone() is not None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_banned(user_id):
    cursor.execute("SELECT is_banned FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    return result and result[0] == 1

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
def update_user(user: types.User):
    cursor.execute("INSERT OR REPLACE INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)",
                   (user.id, user.username, user.first_name, user.last_name))
    conn.commit()

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    update_user(message.from_user)
    
    if is_banned(message.from_user.id):
        await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return
    
    keyboard = InlineKeyboardMarkup()
    if is_admin(message.from_user.id):
        keyboard.add(InlineKeyboardButton("üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    keyboard.add(InlineKeyboardButton("üì¢ –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post"))
    
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤! ‚ú®", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'admin_panel')
async def admin_panel(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="ban_user"),
        InlineKeyboardButton("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="unban_user"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                               message_id=callback_query.message.message_id,
                               text="üõ† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å:",
                               reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'back_to_main')
async def back_to_main(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup()
    if is_admin(callback_query.from_user.id):
        keyboard.add(InlineKeyboardButton("üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    keyboard.add(InlineKeyboardButton("üì¢ –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post"))
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                               message_id=callback_query.message.message_id,
                               text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤! ‚ú®",
                               reply_markup=keyboard)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
@dp.callback_query_handler(lambda c: c.data == 'create_post')
async def create_post(callback_query: types.CallbackQuery):
    if is_banned(callback_query.from_user.id):
        await callback_query.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã.")
        return
    
    await PostStates.waiting_for_text.set()
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                               message_id=callback_query.message.message_id,
                               text="üìù –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ (–º–æ–∂–Ω–æ —Å —ç–º–æ–¥–∑–∏ üòä):")

@dp.message_handler(state=PostStates.waiting_for_text)
async def process_post_text(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photos"))
    keyboard.add(InlineKeyboardButton("üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ", callback_data="publish_no_photos"))
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_post"))
    
    await message.answer(f"üìÑ –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n\n{message.text}\n\n–ß—Ç–æ –¥–∞–ª—å—à–µ? ‚ú®", reply_markup=keyboard)
    await PostStates.next()

@dp.callback_query_handler(lambda c: c.data == 'add_photos', state=PostStates.waiting_for_photos)
async def add_photos(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                               message_id=callback_query.message.message_id,
                               text="üñº –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞ —Ä–∞–∑). –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' ‚úÖ")
    
    async with state.proxy() as data:
        data['photos'] = []

@dp.message_handler(content_types=types.ContentType.PHOTO, state=PostStates.waiting_for_photos)
async def process_photos(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if 'photos' not in data:
            data['photos'] = []
        data['photos'].append(message.photo[-1].file_id)
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="photos_done"))
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_post"))
    
    await message.answer(f"üì∏ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(data['photos'])} —Ñ–æ—Ç–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' ‚úÖ", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'photos_done', state=PostStates.waiting_for_photos)
async def photos_done(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if 'photos' not in data or len(data['photos']) == 0:
            await bot.answer_callback_query(callback_query.id, "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ! ‚ùå")
            return
    
    await show_post_preview(callback_query, state)

@dp.callback_query_handler(lambda c: c.data == 'publish_no_photos', state=PostStates.waiting_for_photos)
async def publish_no_photos(callback_query: types.CallbackQuery, state: FSMContext):
    await show_post_preview(callback_query, state)

async def show_post_preview(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        text = data['text']
        photos = data.get('photos', [])
    
    preview_text = f"üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:\n\n{text}"
    
    if photos:
        preview_text += f"\n\nüì∏ –ë—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm_post"))
    keyboard.add(InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_post"))
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_post"))
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                               message_id=callback_query.message.message_id,
                               text=preview_text,
                               reply_markup=keyboard)
    await PostStates.next()

@dp.callback_query_handler(lambda c: c.data == 'confirm_post', state=PostStates.waiting_for_confirmation)
async def confirm_post(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        text = data['text']
        photos = data.get('photos', [])
    
    if photos:
        # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        media = [InputMediaPhoto(photos[0], caption=text)]
        for photo in photos[1:]:
            media.append(InputMediaPhoto(photo))
        
        await bot.send_media_group(CHANNEL_ID, media)
    else:
        await bot.send_message(CHANNEL_ID, text)
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                               message_id=callback_query.message.message_id,
                               text="‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ! üéâ")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'edit_post', state=PostStates.waiting_for_confirmation)
async def edit_post(callback_query: types.CallbackQuery, state: FSMContext):
    await PostStates.waiting_for_text.set()
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                               message_id=callback_query.message.message_id,
                               text="üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:")

@dp.callback_query_handler(lambda c: c.data == 'cancel_post', state='*')
async def cancel_post(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                               message_id=callback_query.message.message_id,
                               text="‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
@dp.callback_query_handler(lambda c: c.data == 'ban_user')
async def ban_user_start(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    await AdminStates.ban_user.set()
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                               message_id=callback_query.message.message_id,
                               text="üîí –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")

@dp.message_handler(state=AdminStates.ban_user)
async def ban_user_process(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        return
    
    cursor.execute("UPDATE users SET is_banned=1 WHERE user_id=?", (user_id,))
    conn.commit()
    
    if cursor.rowcount > 0:
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. üö´")
    else:
        await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'unban_user')
async def unban_user_start(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    await AdminStates.unban_user.set()
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                               message_id=callback_query.message.message_id,
                               text="üîì –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")

@dp.message_handler(state=AdminStates.unban_user)
async def unban_user_process(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        return
    
    cursor.execute("UPDATE users SET is_banned=0 WHERE user_id=?", (user_id,))
    conn.commit()
    
    if cursor.rowcount > 0:
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. üéâ")
    else:
        await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    
    await state.finish()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
