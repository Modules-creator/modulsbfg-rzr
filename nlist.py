from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from assets.antispam import antispam, admin_only
from commands.db import conn as conngdb, cursor as cursorgdb


# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
cursorgdb.execute('''CREATE TABLE IF NOT EXISTS nick_warn (
                    user_id INTEGER PRIMARY KEY,
                    nickname TEXT,
                    warns INTEGER DEFAULT 0)''')
conngdb.commit()


class NickWarnStates(StatesGroup):
    waiting_for_nickname = State()


@admin_only()
@antispam
async def set_nick_start(message: types.Message):
    if not message.reply_to_message:
        await message.answer("‚Ñπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    target_user = message.reply_to_message.from_user
    await message.answer(f"‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {target_user.id}):")
    await NickWarnStates.waiting_for_nickname.set()
    
    async with state.proxy() as data:
        data['target_id'] = target_user.id
        data['chat_id'] = message.chat.id


@antispam
async def set_nick_finish(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        target_id = data['target_id']
        chat_id = data['chat_id']
    
    nickname = message.text.strip()
    
    if len(nickname) > 20:
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤.")
        await state.finish()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    cursorgdb.execute('SELECT 1 FROM nick_warn WHERE user_id = ?', (target_id,))
    exists = cursorgdb.fetchone()
    
    if exists:
        cursorgdb.execute('UPDATE nick_warn SET nickname = ? WHERE user_id = ?', (nickname, target_id))
    else:
        cursorgdb.execute('INSERT INTO nick_warn (user_id, nickname) VALUES (?, ?)', (target_id, nickname))
    
    conngdb.commit()
    await message.answer(f"‚úÖ –ù–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {nickname}")
    await state.finish()


@antispam
async def nick_list(message: types.Message):
    cursorgdb.execute('SELECT user_id, nickname, warns FROM nick_warn ORDER BY nickname')
    users = cursorgdb.fetchall()
    
    if not users:
        await message.answer("‚Ñπ –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–∏–∫–Ω–µ–π–º—ã –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        return
    
    response = "üìú –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∏–∫–Ω–µ–π–º–∞–º–∏:\n\n"
    for user in users:
        user_id, nickname, warns = user
        response += f"üë§ {nickname} (ID: {user_id}) - ‚ö†Ô∏è –í–∞—Ä–Ω—ã: {warns}/3\n"
    
    await message.answer(response)


@admin_only()
@antispam
async def warn_user(message: types.Message):
    if not message.reply_to_message:
        await message.answer("‚Ñπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    target_user = message.reply_to_message.from_user
    target_id = target_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–Ω–æ–≤
    cursorgdb.execute('SELECT warns FROM nick_warn WHERE user_id = ?', (target_id,))
    result = cursorgdb.fetchone()
    
    if result:
        current_warns = result[0]
    else:
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ
        current_warns = 0
        cursorgdb.execute('INSERT INTO nick_warn (user_id, nickname, warns) VALUES (?, ?, ?)',
                         (target_id, f"@{target_user.username}" if target_user.username else f"ID:{target_id}", 0))
    
    new_warns = current_warns + 1
    
    cursorgdb.execute('UPDATE nick_warn SET warns = ? WHERE user_id = ?', (new_warns, target_id))
    conngdb.commit()
    
    if new_warns >= 3:
        try:
            await message.bot.kick_chat_member(chat_id=message.chat.id, user_id=target_id, until_date=60)
            await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.full_name} –±—ã–ª –∫–∏–∫–Ω—É—Ç –∑–∞ 3 –≤–∞—Ä–Ω–∞.")
        except Exception as e:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    else:
        await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user.full_name} –≤—ã–¥–∞–Ω –≤–∞—Ä–Ω. –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {new_warns}/3")


@antispam
async def user_profile(message: types.Message):
    if not message.reply_to_message:
        await message.answer("‚Ñπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    target_user = message.reply_to_message.from_user
    target_id = target_user.id
    
    cursorgdb.execute('SELECT nickname, warns FROM nick_warn WHERE user_id = ?', (target_id,))
    result = cursorgdb.fetchone()
    
    if not result:
        await message.answer(f"‚Ñπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.full_name} –Ω–µ –∏–º–µ–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞.")
        return
    
    nickname, warns = result
    response = (f"üìã –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
               f"üë§ –ò–º—è: {target_user.full_name}\n"
               f"üÜî ID: {target_id}\n"
               f"üè∑Ô∏è –ù–∏–∫–Ω–µ–π–º: {nickname}\n"
               f"‚ö†Ô∏è –í–∞—Ä–Ω—ã: {warns}/3")
    
    await message.answer(response)


def register_handlers(dp: Dispatcher):
    dp.register_message_handler(set_nick_start, commands=['setnick'])
    dp.register_message_handler(set_nick_finish, state=NickWarnStates.waiting_for_nickname)
    dp.register_message_handler(nick_list, commands=['nlist'])
    dp.register_message_handler(warn_user, commands=['warn'])
    dp.register_message_handler(user_profile, commands=['profile'])


MODULE_DESCRIPTION = {
    'name': 'üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è —á–∞—Ç–∞',
    'description': '–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞–º–∏ –∏ –≤–∞—Ä–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n'
                  '/setnick - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º (—á–µ—Ä–µ–∑ reply)\n'
                  '/nlist - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∏–∫–Ω–µ–π–º–∞–º–∏\n'
                  '/warn - –≤—ã–¥–∞—Ç—å –≤–∞—Ä–Ω (—á–µ—Ä–µ–∑ reply)\n'
                  '/profile - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è (—á–µ—Ä–µ–∑ reply)'
}
